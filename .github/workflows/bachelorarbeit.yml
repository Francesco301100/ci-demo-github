on:
  push:
    branches: [ "main" ]

jobs:
  backend_build:
    runs-on: ubuntu-latest
    container: maven:3.9-eclipse-temurin-17
    steps:
      - uses: actions/checkout@v4
      - run: cd backend && mvn package -DskipTests && echo "jdjf"

  frontend_build:
    runs-on: ubuntu-latest
    container: node:20
    steps:
      - uses: actions/checkout@v4
      - run: cd frontend && npm ci && npm run build

  backend_test:
    runs-on: ubuntu-latest
    needs: backend_build
    container: maven:3.9-eclipse-temurin-17
    steps:
      - uses: actions/checkout@v4
      - run: cd backend && mvn clean test

  frontend_test:
    runs-on: ubuntu-latest
    needs: frontend_build
    container: node:20
    steps:
      - uses: actions/checkout@v4
      - run: cd frontend && npm ci && npm run test

  sonar:
    runs-on: ubuntu-latest
    needs: backend_test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build & SonarQube Analysis
        run: cd backend && mvn clean verify sonar:sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker_backend:
    name: Docker Build & Push (Backend)
    runs-on: ubuntu-latest
    needs: backend_test  
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login (Docker Hub)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker meta (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/myapp-backend
          tags: |
            type=raw,value=latest
            type=sha
            type=ref,event=tag
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/myapp-backend:latest
          cache-to: type=inline
          
  docker_frontend:
    name: Docker Build & Push (Frontend)
    runs-on: ubuntu-latest
    needs: frontend_test  
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login (Docker Hub)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker meta (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/myapp-frontend
          tags: |
            type=raw,value=latest
            type=sha
            type=ref,event=tag
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/myapp-frontend:latest
          cache-to: type=inline
